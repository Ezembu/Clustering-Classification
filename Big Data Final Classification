!apt-get install openjdk-8-jdk-headless


!wget https://archive.apache.org/dist/spark/spark-3.2.1/spark-3.2.1-bin-hadoop2.7.tgz

!tar xf /content/spark-3.2.1-bin-hadoop2.7.tgz

!pip install -q findspark

import os
os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-8-openjdk-amd64"
os.environ["SPARK_HOME"] = "/content/spark-3.2.1-bin-hadoop2.7"

import findspark
findspark.init()
findspark.find()

import pyspark
import numpy as np
import pandas as pd

combined_data_df = pd.read_csv('/content/combined-data.csv')
combined_data_df['label'] = combined_data_df['avg_price'].apply(lambda x: 0 if x < 5 else 1)

counts = combined_data_df['label'].value_counts()
print(counts)


counts = combined_data_df.groupby('platformType')['label'].value_counts()
print(counts)

combined_data_df = combined_data_df.dropna()

combined_data_df.head()

import pyspark.ml.feature
import pyspark.ml.classification 
import pyspark.ml.evaluation
from pyspark.ml.feature import StringIndexer, OneHotEncoder
from pyspark.ml.feature import VectorAssembler
from pyspark.ml.classification import DecisionTreeClassifier
from pyspark.ml.classification import LogisticRegression
from pyspark.ml.classification import LinearSVC
from sklearn.metrics import confusion_matrix
from pyspark.ml.classification import NaiveBayes

from pyspark.sql import SparkSession
spark = SparkSession.builder.appName("example").getOrCreate()

# Assuming combined_data_df is a Pandas DataFrame object
spark_df = spark.createDataFrame(combined_data_df)

# Apply the StringIndexer transformation
indexer = StringIndexer(inputCol='platformType', outputCol='platformType_1').fit(spark_df)
df = indexer.transform(spark_df)

# Select the feature columns of interest
feature_columns = ["teamLevel", "platformType_1", "count_gameclicks", "count_hits", "count_buyId", "avg_price", "label"]
df = df.select(feature_columns)


df.show()

from pyspark.ml.evaluation import MulticlassClassificationEvaluator, BinaryClassificationEvaluator
assembler = VectorAssembler(inputCols=[
    "teamLevel", 
    "platformType_1", 
    "count_gameclicks", 
    "count_hits", 
    "count_buyId", 
], outputCol='features')

df_assembled = assembler.transform(df)
train, test = df_assembled.randomSplit([0.7, 0.3], seed = 2023)
lr = LogisticRegression(featuresCol="features")

lrmodel = lr.fit(train)
predictions_lr = lrmodel.transform(test)

evaluator = BinaryClassificationEvaluator()
lr_accuracy = evaluator.evaluate(predictions_lr) 
print("Test accuracy for logistic regression = " + str(lr_accuracy))
